package {	import flash.events.Event;	import flash.display.MovieClip;	import flash.utils.getQualifiedClassName;	public class Pipeline extends MovieClip {		private var pipeline:Array;		private var failSound:FailSound;		private var okSound:ClickSound;		private var currentItem:Item;		private var currentPart:Part;		public function Pipeline() {			this.failSound = new FailSound();			this.okSound = new ClickSound();			this.pipeline = new Array();		}		public function addItems(items:Array) {			this.pipeline = this.pipeline.concat(items);			if (this.currentItem == null) {				this.currentItem = this.getNextItem();				this.getNextPart();			}		}		private function getNextItem() {			var item:Item = this.pipeline.pop();			var documentClass:DocumentClass = DocumentClass(this.root);			documentClass.item.gotoAndStop(item.image);			return item;		}		private function getNextPart() {			if (this.currentItem.parts.length == 0) {				if (this.hasMoreItems()) {					this.currentItem = this.getNextItem();				} else {					trace('No more today, good sir');					return;				}			}			this.currentPart = this.currentItem.parts.pop();			this.currentPart.resetPosition();			this.currentPart.addEventListener(Part.MISSED, this.miss);			addChild(this.currentPart);		}		private function hasMoreItems() {			return this.pipeline.length > 0;		}		public function process(event:Event) {			this.currentPart.process();		}		public function produced(type:String) {			if (type == getQualifiedClassName(this.currentPart)) {				this.hit(null);			} else {				this.miss(null);			}		}		private function miss(event:Event) {			removeChild(this.currentPart);			this.failSound.play();			this.getNextPart();			this.dispatchEvent(new PipelineEvent(PipelineEvent.PipelineMiss));		}		private function hit(event:Event) {			removeChild(this.currentPart);			this.okSound.play();			this.getNextPart();			this.dispatchEvent(new PipelineEvent(PipelineEvent.PipelineHit));		}	}}