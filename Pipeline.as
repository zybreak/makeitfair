package {	import flash.events.Event;	import flash.display.MovieClip;	import flash.utils.getQualifiedClassName;	public class Pipeline extends MovieClip {		private var pipeline:Array;		private var failSound:FailSound;		private var okSound:ClickSound;		private var currentItem:Item;		private var currentPart:Part;		public function Pipeline() {			this.failSound = new FailSound();			this.okSound = new ClickSound();			this.pipeline = new Array();		}		public function addItems(items:Array) {			this.pipeline = this.pipeline.concat(items);			if (this.currentItem == null && !isEmpty()) {				this.currentItem = this.getNextItem();				this.getNextPart();			}		}				public function isEmpty() {			return (this.pipeline.length == 0)		}		private function getNextItem() {			var item:Item = this.pipeline.pop();			var documentClass:DocumentClass = DocumentClass(this.root);			documentClass.item.gotoAndStop(item.image);			return item;		}		private function getNextPart() {			if (this.currentItem.parts.length == 0) {				if (isEmpty()) {					this.currentPart = null;					return false;				}				this.currentItem = this.getNextItem();			}			this.currentPart = this.currentItem.parts.pop();			this.currentPart.resetPosition();			this.currentPart.addEventListener(PartEvent.MISS, this.miss);			this.currentPart.addEventListener(PartEvent.HIT, this.hit);			addChild(this.currentPart);		}		public function process() {			if (this.currentPart == null) {				return false;			}						this.currentPart.process();			return true;		}		public function produced(type:uint) {			this.currentPart.isType(type);		}		private function miss(event:PartEvent) {			removeChild(this.currentPart);			this.failSound.play();			this.getNextPart();		}		private function hit(event:PartEvent) {			removeChild(this.currentPart);			this.okSound.play();			this.getNextPart();		}	}}